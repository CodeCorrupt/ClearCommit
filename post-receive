#!/bin/sh

################################################################################
# The post-receive script is a server side hook that will execute after a client
# pushes to the server and the server updates it's refs.
#
# What this script will do is cd into the working directory and pull down any
# Changes introduced by the push. This workflow is consistant with that shown
# at http://goo.gl/530jwI. Once these changes are pulled into ClearCase's (CC)
# we go thorugh the process of commiting those changes thorugh to CC.
#
# Note: Remember this is executed from the root of the bare repo NOT repo/hooks
################################################################################

# Path to the CC Snapshot
CCSNAP="$PWD/.."
# Save the path to the bare repo
CCGIT="$PWD"

# Allows us to read user input below, assigns stdin to keyboard
# REF: Stack overflow - http://goo.gl/hddkkV
exec < /dev/tty

echo "**** Fetching changes"
# CD into the snapshot directory
cd "$CCSNAP"
unset GIT_DIR
# Save old sha to get log against
oldSha=$(git rev-parse HEAD)
# Pull in the changes
git fetch origin

if [ ! -z "$(git status | grep 'up-to-date')" ]; then
  echo "**** No new changes: Exiting Early"
  exit 0
fi

echo "**** Merging in changes"
git merge origin/master

#Checkout the files that are hijacked.
echo "**** Begining checkout of now hijacked files"
# Get list of cleartool files  | only hijacked   |cut the filename
hijacked=$(cleartool ls -recur | grep "hijacked" | cut -d '@' -f1 \
                | tr '\\' '/' | sed -e 's. .\\ .g' | xargs)
#               |change \ --> /| escape spaces       | make online
# only try to checkout the files if there's something hijacked
if [ ! -z "$hijacked" ]; then
    echo "There were hijacked files: $hijacked"
    cleartool co -nc -usehijack $hijacked
fi

echo "**** If any new/deleted/renamed files, select the ones to add"
# Set IFS to only newline so that lines are split properly
IFS=$'\n'
for line in `git diff --name-status "$oldSha" master`
do
    status=`echo "$line" | awk '{print $1}'`
    file=`echo "$line" | awk '{print $2}' | sed -e 's. .\\\ .g'`

    if [ "$status" == "A" ]; then
        echo "Do you want to add the file : $file"
        select yn in "Yes" "No"; do
            case $yn in
                Yes )
                    cleartool mkelem -nc -mkp "$file" 2>&1
                    break;;
                No )
                    break;;
            esac
        done
    fi
    if [ "$status" == "D" ]; then
        echo "Do you want to remove the file : $file"
        select yn in "Yes" "No"; do
            case $yn in
                Yes )
                    # Checkout the file and unhijack it
                    cleartool update -overwrite "$file"
                    # checkout the parent directory
                    cleartool co -nc $(dirname "$file")
                    # rmname the file
                    cleartool rmname -nc "$file"
                    break;;
                No )
                    break;;
            esac
        done
    fi
done
# Set IFS back to before
unset IFS

# Check in the files
echo "**** Checking in the checked out files"
for file in $(cleartool ls -recur .. | grep "CHECKEDOUT" | cut -d '@' -f1 \
              | tr '\\' '/' | sed -e 's. .\\ .g' | grep -e "^../${PWD##*/}")
do
    # Get the commit log that applies to the current file
    comment=$(git log --reverse --format=%B HEAD "$oldSha" "$file")
    cleartool checkin -c "$comment" "$file"
done

echo "**** Checking in the parent directory"
cleartool checkin -nc "."
